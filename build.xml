<?xml version="1.0" encoding="UTF-8"?>
<project name="miaoxing" default="full-build">

  <property environment="env"/>

  <property name="workspace" value="${env.WORKSPACE}"/>
  <property name="root-dir" value="${env.JENKINS_HOME}/jobs/miaoxing-test/workspace"/>
  <property name="app-dir" value="${root-dir}/plugins/app"/>

  <property name="sh" value="docker"/>
  <property name="sh-pre" value="exec -i docker_php_1"/>

  <property name="php" value="docker"/>
  <property name="php-pre" value="exec -i docker_php_1 php"/>

  <property name="phpunit" value="docker"/>
  <property name="phpunit-pre" value="exec -i docker_php_1 phpunit"/>

  <property name="phploc" value="docker"/>
  <property name="phploc-pre" value="exec -i docker_php_1 /data/web/build/phploc.phar"/>

  <property name="pdepend" value="docker"/>
  <property name="pdepend-pre" value="exec -i docker_php_1 /data/web/build/pdepend.phar"/>

  <property name="phpmd" value="docker"/>
  <property name="phpmd-pre" value="exec -i docker_php_1 php -d memory_limit=384M -d auto_prepend_file=/data/web/miaostar/vendor/autoload.php /data/web/build/phpmd.phar"/>

  <property name="phpcs" value="docker"/>
  <property name="phpcs-pre" value="exec -i docker_php_1 /data/web/build/phpcs.phar"/>

  <property name="phpcpd" value="docker"/>
  <property name="phpcpd-pre" value="exec -i docker_php_1 php -d memory_limit=256M /data/web/build/phpcpd.phar"/>

  <property name="phpdox" value="docker"/>
  <property name="phpdox-pre" value="exec -i docker_php_1 /data/web/build/phpdox.phar"/>

  <target name="full-build"
          depends="prepare,static-analysis,phpunit,-check-failure"
          description="Performs static analysis, runs the tests, and generates project documentation"/>

  <target name="full-build-parallel"
          depends="prepare,static-analysis-parallel,phpunit,-check-failure"
          description="Performs static analysis (executing the tools in parallel), runs the tests, and generates project documentation"/>

  <target name="quick-build"
          depends="prepare,lint,phpunit-no-coverage"
          description="Performs a lint check and runs the tests (without generating code coverage reports)"/>

  <target name="static-analysis"
          depends="lint,phploc-ci,pdepend,phpmd-ci,phpcs-ci,phpcpd-ci"
          description="Performs static analysis"/>

  <!-- Adjust the threadCount attribute's value to the number of CPUs -->
  <target name="static-analysis-parallel"
          description="Performs static analysis (executing the tools in parallel)">
    <parallel threadCount="2">
      <sequential>
        <antcall target="pdepend"/>
        <antcall target="phpmd-ci"/>
      </sequential>
      <antcall target="lint"/>
      <antcall target="phpcpd-ci"/>
      <antcall target="phpcs-ci"/>
      <antcall target="phploc-ci"/>
    </parallel>
  </target>

  <target name="clean"
          unless="clean.done"
          description="Cleanup build artifacts">

    <exec executable="${sh}">
      <arg line="${sh-pre}"/>
      <arg line="rm -rf"/>
      <arg line="${workspace}/build/api"/>
      <arg line="${workspace}/build/coverage"/>
      <arg line="${workspace}/build/logs"/>
      <arg line="${workspace}/build/pdepend"/>
    </exec>

    <property name="clean.done" value="true"/>
  </target>

  <target name="prepare"
          unless="prepare.done"
          depends="clean"
          description="Prepare for build">

    <exec executable="${sh}">
      <arg line="${sh-pre}"/>
      <arg line="mkdir -p"/>
      <arg line="${workspace}/build/api"/>
      <arg line="${workspace}/build/coverage"/>
      <arg line="${workspace}/build/logs"/>
      <arg line="${workspace}/build/pdepend"/>
    </exec>

    <property name="prepare.done" value="true"/>
  </target>

  <target name="lint"
          unless="lint.done"
          description="Perform syntax check of sourcecode files">
    <apply executable="${php}" taskname="lint">
      <arg line="${php-pre}"/>
      <arg value="-l"/>

      <fileset dir="${workspace}">
        <include name="**.php"/>
        <modified/>
      </fileset>

    </apply>

    <property name="lint.done" value="true"/>
  </target>

  <target name="phploc"
          unless="phploc.done"
          description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line.">
    <exec executable="${phploc}" taskname="phploc">
      <arg value="--count-tests"/>
      <arg path="${workspace}"/>
    </exec>

    <property name="phploc.done" value="true"/>
  </target>

  <target name="phploc-ci"
          unless="phploc.done"
          depends="prepare"
          description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
    <exec executable="${phploc}" taskname="phploc">
      <arg line="${phploc-pre}"/>
      <arg value="--count-tests"/>
      <arg value="--log-csv"/>
      <arg path="${workspace}/build/logs/phploc.csv"/>
      <arg value="--log-xml"/>
      <arg path="${workspace}/build/logs/phploc.xml"/>
      <arg path="${workspace}"/>
    </exec>

    <property name="phploc.done" value="true"/>
  </target>

  <target name="pdepend"
          unless="pdepend.done"
          depends="prepare"
          description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
    <exec executable="${pdepend}" taskname="pdepend">
      <arg line="${pdepend-pre}"/>
      <arg value="--jdepend-xml=${workspace}/build/logs/jdepend.xml"/>
      <arg value="--jdepend-chart=${workspace}/build/pdepend/dependencies.svg"/>
      <arg value="--overview-pyramid=${workspace}/build/pdepend/overview-pyramid.svg"/>
      <arg path="${workspace}"/>
    </exec>

    <property name="pdepend.done" value="true"/>
  </target>

  <target name="phpmd"
          unless="phpmd.done"
          description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
    <exec executable="${phpmd}" taskname="phpmd">
      <arg line="${phpmd-pre}"/>
      <arg path="${workspace}/src"/>
      <arg value="text"/>
      <arg path="${app-dir}/build/phpmd.xml"/>
    </exec>

    <property name="phpmd.done" value="true"/>
  </target>

  <target name="phpmd-ci"
          unless="phpmd.done"
          depends="prepare"
          description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
    <exec executable="${sh}" resultproperty="result.phpmd-ci" taskname="phpmd">
      <arg line="${sh-pre}"/>
      <!-- 因为docker不支持直接cd切换目录,所以需要通过sh执行 -->
      <arg line="sh -c '
cd ${root-dir};
php -d memory_limit=384M -d auto_prepend_file=vendor/autoload.php
/data/web/build/phpmd.phar ${workspace}
xml ${app-dir}/build/phpmd.xml
--reportfile ${workspace}/build/logs/pmd.xml
--exclude ${workspace}/vendor
'"/>
    </exec>

    <property name="phpmd.done" value="true"/>
  </target>

  <target name="phpcs"
          unless="phpcs.done"
          description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
    <exec executable="${phpcs}" taskname="phpcs">
      <arg line="${phpcs-pre}"/>
      <arg value="--standard=PSR2"/>
      <arg value="--extensions=php"/>
      <arg value="--ignore=autoload.php"/>
      <arg path="${workspace}"/>
    </exec>

    <property name="phpcs.done" value="true"/>
  </target>

  <target name="phpcs-ci"
          unless="phpcs.done"
          depends="prepare"
          description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
    <exec executable="${phpcs}" output="/dev/null" taskname="phpcs">
      <arg line="${phpcs-pre}"/>
      <arg value="--report=checkstyle"/>
      <arg value="--report-file=${workspace}/build/logs/checkstyle.xml"/>
      <arg value="--standard=PSR2"/>
      <arg value="--extensions=php"/>
      <arg value="--ignore=autoload.php"/>
      <arg path="${workspace}"/>
    </exec>

    <property name="phpcs.done" value="true"/>
  </target>

  <target name="phpcpd"
          unless="phpcpd.done"
          description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing.">
    <exec executable="${phpcpd}" taskname="phpcpd">
      <arg line="${phpcpd-pre}"/>
      <arg path="${workspace}"/>
    </exec>

    <property name="phpcpd.done" value="true"/>
  </target>

  <target name="phpcpd-ci"
          unless="phpcpd.done"
          depends="prepare"
          description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
    <exec executable="${phpcpd}" taskname="phpcpd">
      <arg line="${phpcpd-pre}"/>
      <arg value="--exclude"/>
      <arg path="${workspace}/vendor"/>
      <arg value="--log-pmd"/>
      <arg path="${workspace}/build/logs/pmd-cpd.xml"/>
      <arg path="${workspace}"/>
    </exec>

    <property name="phpcpd.done" value="true"/>
  </target>

  <target name="phpunit"
          unless="phpunit.done"
          depends="prepare"
          description="Run unit tests with PHPUnit">

    <!-- 因PHPUnit使用配置文件所在目录作为根路径,所以需要复制到相应的插件中 -->
    <exec executable="${sh}">
      <arg line="${sh-pre}"/>
      <arg value="cp"/>
      <arg path="${app-dir}/build/phpunit.xml"/>
      <arg path="${workspace}/build/phpunit.xml"/>
    </exec>

    <exec executable="${phpunit}" resultproperty="result.phpunit" taskname="phpunit">
      <arg line="${phpunit-pre}"/>

      <arg value="--bootstrap"/>
      <arg path="${app-dir}/../../tests/bootstrap.php"/>

      <arg value="--configuration"/>
      <arg path="${workspace}/build/phpunit.xml"/>

      <arg value="--coverage-html"/>
      <arg path="${workspace}/build/coverage"/>

      <arg value="--coverage-clover"/>
      <arg path="${workspace}/build/logs/clover.xml"/>

      <arg value="--coverage-crap4j"/>
      <arg path="${workspace}/build/logs/crap4j.xml"/>

      <arg value="--coverage-xml"/>
      <arg path="${workspace}/build/logs/coverage"/>

      <arg value="--log-junit"/>
      <arg path="${workspace}/build/logs/junit.xml"/>

      <arg path="${workspace}"/>
    </exec>

    <property name="phpunit.done" value="true"/>
  </target>

  <target name="phpunit-no-coverage"
          unless="phpunit.done"
          depends="prepare"
          description="Run unit tests with PHPUnit (without generating code coverage reports)">
    <exec executable="${phpunit}" failonerror="true" taskname="phpunit">
      <arg line="${phpunit-pre}"/>

      <arg value="--bootstrap"/>
      <arg path="${app-dir}/../../tests/bootstrap.php"/>

      <arg value="--configuration"/>
      <arg path="${workspace}/build/phpunit.xml"/>

      <arg value="--no-coverage"/>
    </exec>

    <property name="phpunit.done" value="true"/>
  </target>

  <target name="phpdox"
          unless="phpdox.done"
          depends="phploc-ci,phpcs-ci,phpmd-ci"
          description="Generate project documentation using phpDox">
    <exec executable="${phpdox}" taskname="phpdox">
      <arg line="${phpdox-pre}"/>
      <arg value="${workspace}/build"/>
    </exec>

    <property name="phpdox.done" value="true"/>
  </target>

  <target name="-check-failure">
    <fail message="PHPMD did not finish successfully">
      <condition>
        <not>
          <or>
            <equals arg1="${result.phpmd-ci}" arg2="0"/>
            <equals arg1="${result.phpmd-ci}" arg2="2"/>
          </or>
        </not>
      </condition>
    </fail>

    <fail message="PHPUnit did not finish successfully">
      <condition>
        <not>
          <equals arg1="${result.phpunit}" arg2="0"/>
        </not>
      </condition>
    </fail>
  </target>
</project>
